player.action
  0=moving
  1=shooting
  2=switching 
  3=dying
  4=teleporting
  5=climbing
  6=pogo

select case player.action
 case moving
  movingframes
 case shooting
  shootingframes
 case switching
  switchingframes
 case dying
  dyingframes
 case teleporting
  teleportingframes
 case climbing
  climbingframes
 case pogo
  pogoframes
end select

SUB MovingFrames
  if onground
    if left
      {if moving, else standing}
     elseif right
      {if moving, else standing}
    end if
   else
    if left
      {frame depends on vert speed}
     elseif right
      {frame depends on vert speed}
    end if
  end if
END SUB

SUB ShootingFrames
  if player.action=climbing
    select case player.aim
     case -1
      if left {frame is poleleft}
      if right {frame is poleright}
     case up
      if left {frame is poleleftup}
      if right {frame is polerightup}
     case down
      if left {frame is poleleftdown}
      if right {frame is polerightdown}
    end select
    exit sub
  end if

  if onground
    if aiming(up)
      {shoot up}
     else
      if left {shoot left}
      if right {shoot right}    
    end if
   else
    if aiming
      if aiming up {shoot up}
      if aiming down {shoot down}
     else
      if left {shoot left}
      if right {shoot right}
    end if
  end if
END SUB

SUB SwitchingFrames
  {frame is anmcounter/delay+switchframe}
END SUB

SUB DyingFrames
  {dying frame}
END SUB

SUB TeleportingFrames
  {frame is teleportframe+(maxfps*.7-actiontime)/(maxfps*.7/teleportframe)}
END SUB

SUB ClimbingFrames
  select case player.aim
   case up
    if left {ClimbUpLeft+(anmcounter/delay mod ClimbUpLeftFrames)}
    if right {ClimbUpRight+(anmcounter/delay mod ClimbUpRightFrames)}
   case down
    {ClimbDown+(anmcounter/(delay*2) mod ClimbDownFrames)}
   case -1
    if left {climb left}
    if right {climb right}
  end select
END SUB

SUB PogoFrames
  select case player.xdir
   case left
    if player.onground then {PogoLeftGround} else {PogoLeftAir}
   case right
    if player.onground thne {PogoRightGround} else {PogoRightGround}
  end select
END SUB
